// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WholesBrew.DataAccess.Contexts;

#nullable disable

namespace WholesBrew.DataAccess.Migrations
{
    [DbContext(typeof(WholesBrewSqlServerDbContext))]
    partial class WholesBrewSqlServerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WholesBrew.Model.Entities.BeerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlcoholContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ALCOHOL_CONTENT");

                    b.Property<int>("BrewerId")
                        .HasColumnType("int")
                        .HasColumnName("BREWER_ID");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATION_DATE");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("CREATOR_ID");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFICATION_DATE");

                    b.Property<long>("ModificatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("MODIFICATOR_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PRICE");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("QUANTITY");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("ROW_VERSION");

                    b.HasKey("Id");

                    b.HasIndex("BrewerId");

                    b.ToTable("WB_BEER");
                });

            modelBuilder.Entity("WholesBrew.Model.Entities.BrewerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATION_DATE");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("CREATOR_ID");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFICATION_DATE");

                    b.Property<long>("ModificatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("MODIFICATOR_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("ROW_VERSION");

                    b.HasKey("Id");

                    b.ToTable("WB_BREWER");
                });

            modelBuilder.Entity("WholesBrew.Model.Entities.RestrictionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeerId")
                        .HasColumnType("int")
                        .HasColumnName("BEER_ID");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATION_DATE");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("CREATOR_ID");

                    b.Property<int>("MaxQuantity")
                        .HasColumnType("int")
                        .HasColumnName("MAX_QUANTITY");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFICATION_DATE");

                    b.Property<long>("ModificatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("MODIFICATOR_ID");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("ROW_VERSION");

                    b.Property<int>("WholesalerId")
                        .HasColumnType("int")
                        .HasColumnName("WHOLESALER_ID");

                    b.HasKey("Id");

                    b.HasIndex("BeerId");

                    b.HasIndex("WholesalerId");

                    b.ToTable("WB_RESTRICTION");
                });

            modelBuilder.Entity("WholesBrew.Model.Entities.SaleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeerId")
                        .HasColumnType("int")
                        .HasColumnName("BEER_ID");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATION_DATE");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("CREATOR_ID");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFICATION_DATE");

                    b.Property<long>("ModificatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("MODIFICATOR_ID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("QUANTITY");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("ROW_VERSION");

                    b.Property<int>("WholesalerId")
                        .HasColumnType("int")
                        .HasColumnName("WHOLESALER_ID");

                    b.HasKey("Id");

                    b.HasIndex("BeerId");

                    b.HasIndex("WholesalerId");

                    b.ToTable("WB_SALE");
                });

            modelBuilder.Entity("WholesBrew.Model.Entities.UserEntity", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ENCODERID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<string>("ActiveDirectoryLogin")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("ACTIVEDIRECTORYLOGIN");

                    b.Property<bool?>("CanCreateUser")
                        .HasMaxLength(1)
                        .HasColumnType("bit")
                        .HasColumnName("CREATEUSERSALLOW");

                    b.Property<string>("EmailAdress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("EMAILADDRESS");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("FIRSTNAME");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLED");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("LASTNAME");

                    b.Property<string>("Mnemonic")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("ENCODER");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PHONE");

                    b.Property<string>("SafeAccount")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("UCODE");

                    b.HasKey("UserId");

                    b.ToTable("ENCODER");
                });

            modelBuilder.Entity("WholesBrew.Model.Entities.WholesalerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATION_DATE");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("CREATOR_ID");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFICATION_DATE");

                    b.Property<long>("ModificatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("MODIFICATOR_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("ROW_VERSION");

                    b.HasKey("Id");

                    b.ToTable("WB_WHOLESALER");
                });

            modelBuilder.Entity("WholesBrew.Model.Entities.WholesalerStockEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeerId")
                        .HasColumnType("int")
                        .HasColumnName("BEER_ID");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATION_DATE");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("CREATOR_ID");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFICATION_DATE");

                    b.Property<long>("ModificatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("MODIFICATOR_ID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PRICE");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("QUANTITY");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("ROW_VERSION");

                    b.Property<int>("WholesalerId")
                        .HasColumnType("int")
                        .HasColumnName("WHOLESALER_ID");

                    b.HasKey("Id");

                    b.HasIndex("BeerId");

                    b.HasIndex("WholesalerId");

                    b.ToTable("WB_WHOLESALER_STOCK");
                });

            modelBuilder.Entity("WholesBrew.Model.Entities.BeerEntity", b =>
                {
                    b.HasOne("WholesBrew.Model.Entities.BrewerEntity", "Brewer")
                        .WithMany()
                        .HasForeignKey("BrewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brewer");
                });

            modelBuilder.Entity("WholesBrew.Model.Entities.RestrictionEntity", b =>
                {
                    b.HasOne("WholesBrew.Model.Entities.BeerEntity", "Beer")
                        .WithMany()
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WholesBrew.Model.Entities.WholesalerEntity", "Wholesaler")
                        .WithMany()
                        .HasForeignKey("WholesalerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");

                    b.Navigation("Wholesaler");
                });

            modelBuilder.Entity("WholesBrew.Model.Entities.SaleEntity", b =>
                {
                    b.HasOne("WholesBrew.Model.Entities.BeerEntity", "Beer")
                        .WithMany()
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WholesBrew.Model.Entities.WholesalerEntity", "Wholesaler")
                        .WithMany()
                        .HasForeignKey("WholesalerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");

                    b.Navigation("Wholesaler");
                });

            modelBuilder.Entity("WholesBrew.Model.Entities.WholesalerStockEntity", b =>
                {
                    b.HasOne("WholesBrew.Model.Entities.BeerEntity", "Beer")
                        .WithMany()
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WholesBrew.Model.Entities.WholesalerEntity", "Wholesaler")
                        .WithMany()
                        .HasForeignKey("WholesalerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");

                    b.Navigation("Wholesaler");
                });
#pragma warning restore 612, 618
        }
    }
}
